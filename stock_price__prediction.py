# -*- coding: utf-8 -*-
"""stock_Price _prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kfbhwxdb2vv5Xjsw-xrfXbATBuFubKKC
"""

import yfinance as yf
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
import tensorflow as tf
from keras.models import Sequential
from keras.layers import LSTM, Dense

# Function to preprocess data
def preprocess_data(data):
    data = data['Adj Close'].pct_change().dropna()
    return data

# Function to create LSTM model
def create_lstm_model(input_shape):
    model = Sequential()
    model.add(LSTM(64, return_sequences=True, input_shape=input_shape))
    model.add(LSTM(32, return_sequences=False))
    model.add(Dense(1))
    return model

# Function to train LSTM model
def train_lstm_model(model, X_train, y_train, epochs=100, batch_size=32):
    model.compile(loss='mse', optimizer='adam')
    history = model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, validation_split=0.2)
    return history

# List of stock symbols
stocks = ['AAPL', 'GOOGL', 'MSFT', 'AMZN', 'TPE', 'NFLX', 'TSLA', 'NVDA', 'INTC', 'AMD']

# Downloading stock data and preprocessing
def download_and_preprocess_data(stocks, start_date, end_date):
    data = yf.download(stocks, start=start_date, end=end_date)
    data = preprocess_data(data)
    return data

# Feature scaling
def scale_data(data):
    scaler = MinMaxScaler()
    data_scaled = scaler.fit_transform(data.values.reshape(-1, 1))
    return data_scaled, scaler

# Split data into sequences for LSTM
def prepare_sequences(data_scaled, sequence_length):
    X, y = [], []
    for i in range(len(data_scaled) - sequence_length):
        X.append(data_scaled[i:i+sequence_length, 0])
        y.append(data_scaled[i+sequence_length, 0])
    X, y = np.array(X), np.array(y)
    return X, y

#Model training
def train_model(X_train, y_train, input_shape):
    model = create_lstm_model(input_shape)
    history = train_lstm_model(model, X_train, y_train)
    return model, history

# Example usage
start_date = '2018-01-01'
end_date = '2024-03-27'
sequence_length = 30

data = download_and_preprocess_data(stocks, start_date, end_date)
data_scaled, scaler = scale_data(data)
X, y = prepare_sequences(data_scaled, sequence_length)
split = int(0.8 * len(X))
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)
input_shape = (X_train.shape[1], 1)
model, history = train_model(X_train, y_train, input_shape)

# After training the model
model.save('stock_price_prediction_model.h5')