# -*- coding: utf-8 -*-
"""stock_deploy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q7nrIDHAQzKt57IGlkGKvBg0BWSS9DFk
"""



import streamlit as st
import numpy as np
import yfinance as yf
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt
import seaborn as sns
from keras.models import load_model

# Function to preprocess data
def preprocess_data(data):
    data = data['Adj Close'].pct_change().dropna()
    return data

# Function to create LSTM model
def create_lstm_model(input_shape):
    model = Sequential()
    model.add(LSTM(64, return_sequences=True, input_shape=input_shape))
    model.add(LSTM(32, return_sequences=False))
    model.add(Dense(1))
    return model

# Function to make predictions
def make_predictions(model, X):
    predictions = model.predict(X)
    return predictions

# Streamlit UI
st.title('Real-Time Stock Price Prediction')
stock_symbol = st.text_input('Enter Stock Symbol (e.g., AAPL)', 'AAPL')
lookback_days = st.slider('Lookback Days', min_value=30, max_value=365, value=30)
submit_button = st.button('Predict')

if submit_button:
    # Fetching latest data for the selected stock
    data = yf.download(stock_symbol, period=f"{lookback_days}d")
    if data.empty:
        st.error("Failed to fetch data. Please enter a valid stock symbol.")
    else:
        # Preprocessing data
        data = preprocess_data(data)

        # Feature scaling
        scaler = MinMaxScaler()
        data_scaled = scaler.fit_transform(data.values.reshape(-1, 1))

        # Prepare sequences for LSTM
        X_seq = []
        sequence_length = 30
        for i in range(len(data_scaled) - sequence_length + 1):  # Adjusted range
          X_seq.append(data_scaled[i:i+sequence_length, 0])
        X_seq = np.array(X_seq)
        print("Shape of X_seq before reshaping:", X_seq.shape)  # Add this line
        X_seq = X_seq.reshape(X_seq.shape[0], X_seq.shape[1], 1)

        # Make predictions
        predictions = make_predictions(model, X_seq)

        # Visualizations
        st.subheader('Predicted Stock Price Changes:')
        st.line_chart(pd.DataFrame(predictions, columns=["Predicted"]), use_container_width=True)

        st.subheader('Distribution of Predicted Stock Price Changes:')
        fig, ax = plt.subplots()
        sns.histplot(predictions, kde=True, ax=ax)
        st.pyplot(fig)

        st.subheader('Box Plot of Predicted Stock Price Changes:')
        fig, ax = plt.subplots()
        sns.boxplot(predictions, ax=ax)
        st.pyplot(fig)

        st.subheader('Violin Plot of Predicted Stock Price Changes:')
        fig, ax = plt.subplots()
        sns.violinplot(predictions, ax=ax)
        st.pyplot(fig)

        st.subheader('Swarm Plot of Predicted Stock Price Changes:')
        fig, ax = plt.subplots()
        sns.swarmplot(predictions, ax=ax)
        st.pyplot(fig)

